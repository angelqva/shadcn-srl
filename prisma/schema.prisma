// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum EstadoEvento {
    PENDIENTE
    APROBADO
    CANCELADO
}

enum TipoEvento {
    PERSONAL
    LOCAL
    MEDIO
}

enum EstadoOrden {
    PENDIENTE
    REVICION
    APROBADO
    CANCELADO
}

enum EstadoLocal {
    ACTIVO
    INACTIVO
    EN_MANTENIMIENTO
}

enum EstadoMedio {
    BUENO
    ROTO
    EN_MANTENIMIENTO
    BAJA
}

model Usuario {
    id             Int    @id @default(autoincrement())
    correo         String @unique
    nombreCompleto String
    roles          String @default("usuario")

    creadoEn       DateTime       @default(now())
    actualizadoEn  DateTime       @default(now()) @updatedAt
    eliminadoEn    DateTime?
    contactos      Contacto[]
    perfil         PerfilUsuario?
    eventos        Evento[]
    notificaciones Notificacion[]

    @@map("usuarios")
}

model Notificacion {
    id          Int     @id @default(autoincrement())
    usuario     Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
    usuarioId   Int
    titulo      String
    descripcion String? @db.Text
    enlace      String?
    leido       Boolean @default(false)

    creadoEn      DateTime  @default(now())
    actualizadoEn DateTime  @updatedAt
    eliminadoEn   DateTime?

    @@map("notificaciones")
}

model PerfilUsuario {
    id        Int       @id @default(autoincrement())
    apodo     String?
    bigrafia  String?   @db.Text
    avatarUrl String?
    telefono  String?
    fechaNac  DateTime?

    creadoEn      DateTime  @default(now())
    actualizadoEn DateTime  @updatedAt
    eliminadoEn   DateTime?

    // Relación inversa 1–1 con Usuario
    usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
    usuarioId Int     @unique

    @@map("perfiles_usuarios")
}

model Contacto {
    id             Int     @id @default(autoincrement())
    nombreCompleto String
    correo         String
    telefono       String?

    creadoEn      DateTime  @default(now())
    actualizadoEn DateTime  @updatedAt
    eliminadoEn   DateTime?

    usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
    usuarioId Int

    @@map("contactos")
}

model Actividad {
    id            Int       @id @default(autoincrement())
    nombre        String    @unique
    icono         String
    descripcion   String    @db.Text
    creadoEn      DateTime  @default(now())
    actualizadoEn DateTime  @default(now()) @updatedAt
    eliminadoEn   DateTime?
    Evento        Evento[]

    @@map("actividades")
}

model Area {
    id          Int    @id @default(autoincrement())
    codigo      String @unique
    nombre      String @unique
    ubicacion   String @db.Text
    descripcion String @db.Text

    creadoEn      DateTime  @default(now())
    actualizadoEn DateTime  @default(now()) @updatedAt
    eliminadoEn   DateTime?

    locales Local[]

    @@map("areas")
}

model Local {
    id           Int         @id @default(autoincrement())
    codigo       String      @unique
    nombre       String
    estado       EstadoLocal @default(ACTIVO)
    descripcion  String      @db.Text
    ubicacion    String      @db.Text
    responsables String      @db.Text

    creadoEn      DateTime  @default(now())
    actualizadoEn DateTime  @default(now()) @updatedAt
    eliminadoEn   DateTime?

    areaId Int
    area   Area     @relation(fields: [areaId], references: [id], onDelete: Cascade)
    medios Medio[]
    Evento Evento[]
}

model Medio {
    id           Int         @id @default(autoincrement())
    codigo       String      @unique
    nombre       String
    descripcion  String      @db.Text
    responsables String      @db.Text
    estado       EstadoMedio @default(BUENO)

    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @default(now()) @updatedAt
    eliminadoEn DateTime?

    localId Int
    local   Local    @relation(fields: [localId], references: [id], onDelete: Cascade)
    Evento  Evento[]
}

model Evento {
    id              Int          @id @default(autoincrement())
    titulo          String
    inicio          DateTime
    fin             DateTime
    estado          EstadoEvento @default(PENDIENTE)
    tipo            TipoEvento   @default(PERSONAL)
    // Relación al tipo de actividad (creados por administrador)
    actividad       Actividad    @relation(fields: [nombreActividad], references: [nombre])
    nombreActividad String

    // Puede ser personal (propio del usuario)...
    usuario   Usuario? @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
    usuarioId Int?

    // ...o de un local...
    local       Local?  @relation(fields: [codigoLocal], references: [codigo], onDelete: Cascade)
    codigoLocal String?

    // ...o de un medio
    medio       Medio?  @relation(fields: [codigoMedio], references: [codigo], onDelete: Cascade)
    codigoMedio String?

    creadoEn      DateTime  @default(now())
    actualizadoEn DateTime  @updatedAt
    eliminadoEn   DateTime?

    OrdenAseguramiento OrdenAseguramiento[]

    @@map("eventos")
}

model Aseguramiento {
    id          Int     @id @default(autoincrement())
    nombre      String  @unique
    descripcion String? @db.Text

    creadoEn      DateTime  @default(now())
    actualizadoEn DateTime  @updatedAt
    eliminadoEn   DateTime?

    ordenDetalles OrdenAseguramientoDetalle[]

    @@map("aseguramientos")
}

model OrdenAseguramiento {
    id Int @id @default(autoincrement())

    evento   Evento @relation(fields: [eventoId], references: [id], onDelete: Cascade)
    eventoId Int

    estado EstadoOrden @default(PENDIENTE)

    creadoEn      DateTime  @default(now())
    actualizadoEn DateTime  @updatedAt
    eliminadoEn   DateTime?

    detalles OrdenAseguramientoDetalle[]

    @@map("ordenes_aseguramiento")
}

model OrdenAseguramientoDetalle {
    orden   OrdenAseguramiento @relation(fields: [ordenId], references: [id], onDelete: Cascade)
    ordenId Int

    aseguramiento   Aseguramiento @relation(fields: [aseguramientoId], references: [id], onDelete: Cascade)
    aseguramientoId Int

    cantidadParticipantes Int @default(1)

    @@id([ordenId, aseguramientoId])
    @@map("ordenes_aseguramiento_detalles")
}
